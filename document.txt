最新版のnodejsをインストール
sudo apt install -y nodejs npm
sudo npm install n -g
sudo n stable
sudo apt purge -y nodejs npm
exec $SHELL -l
node -v

gitコマンドのインストール
sudo apt install git

仲西のリポジトリのクローン
git clone -b master https://github.com/Nakanishi-Asahi/webapp_shift_management.git

モジュールのインストール
cd webapp_shift_management/workspace2/
rm package.json node_modules/ -r -d
npm init
npm install express body-parser mysql bcrypt cookie-parser fs --save

mysqlのインストール
sudo apt install mysql-server mysql-client
mysql --version
sudo mysql_secure_installation
設定は以下を参照
https://qiita.com/houtarou/items/a44ce783d09201fc28f5

mysqlへユーザを追加する
sudo mysql -u root -p
先ほど設定したパスワードを入力
create user "mysql"@"localhost" identified by "mysqlmysql";
grant all on *.* to "mysql"@"localhost";
quit

mysql@localhostでmysqlにログインしなおす
mysql -u mysql -p
mysqlmysql

データベースdb0の作成
create database db0;
quit

db0を今回のアプリにあったものに設定する
mysql -u mysql -p db0<mysqldump.txt
mysqlmysql
use db0;
select * from shift_users;
show columns from shift_inputs;
quit

動作確認
node index.js
ブラウザでhttp://localhost:5000/homeにアクセス
確認出来たらCtrl+Cでいったん中断

nginxのインストール
wget https://nginx.org/keys/nginx_signing.key
sudo apt-key add nginx_signing.key

sudo vim /etc/apt/sources.list（ここはemacsでもいい）
以下の2行を末尾に追加する
deb http://nginx.org/packages/ubuntu/ bionic nginx
deb-src http://nginx.org/packages/ubuntu/ bionic nginx

sudo apt update
sudo apt install nginx
nginx -v

nginxの動作確認
sudo systemctl enable nginx
sudo systemctl status nginx
activeになっていたらOK
activeになっていなかったら
sudo systemctl start nginx
一応、http://localhost:80/にアクセスする
Welcome to NginxとなっていたらOK

nginxをreverseproxyとして設定する。
sudo vim /etc/nginx/conf.d/default.conf（ファイルの名前はもしかしたら違うかも）
以下は設定ファイル
###################################################################################
server{
        listen 80;
        server_name localhost;
        location /{
                 root /home/nakanishi/nginx/html;
                 index hello.html index.htm;
                 try_files $uri $uri/ @app;
        }
        location @app{
                 proxy_redirect off;
                 proxy_set_header Host $host;
                 proxy_set_header X-Real-IP $remote_addr;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_set_header X-Forwarded-Proto $scheme;
                 proxy_read_timeout 1m;
                 proxy_connect_timeout 1m;
                 proxy_pass http://localhost:5000;
        }
}
###################################################################################

〇ドメインの取得
お名前ドットコムから取得する。取得するドメインは「.net」
サーバー選択の箇所は「利用しない」を選択する。
他は流れに沿って進める。
参考　https://tekito-style.me/columns/domain-onamae
〇さくらVPSの設定
参考　https://manual.sakura.ad.jp/cloud/tutorial/index.html
サーバーを借りた後、OSを再インストールする
.isoファイルを指定する(WinSCPなど、何らかのSFTPでサーバーに転送)
→ubuntu-server18.04をインストール
OSのインストール後、ネットワーク設定をする
→サーバーに割り振られている固定IPアドレスを設定する
設定ファイル→/etc/netplan/00-installer-config.yaml
network:
  ethernets:
    ens3:
      addresses:
      - 133.125.49.250/23
      gateway4: 133.125.48.1
      nameservers:
        addresses:
        - 133.242.0.3
        - 133.242.0.4
  version: 2
IPv4
アドレス　133.125.49.250
ゲートウェイ　133.125.48.1
ネットマスク　255.255.254.0 … /23
プライマリDNS　133.242.0.3
セカンダリDNS　133.242.0.4
#ネットワーク設定を適用
$sudo netplan apply
参考　https://linuxfan.info/ubuntu-1804-server-static-ip-address
　　　https://jyn.jp/ubuntu-localip-static/
　　　https://www.yokoweb.net/2018/05/09/ubuntu18-network-fix-ip-address/
〇ssl証明書の取得
さくらVPS→JPRSドメイン認証型
CSRの生成手順　https://jprs.jp/pubcert/service/manual/
opensslを参照
CSRを生成し、さくらに証明書申し込みをしたら、
さくらから送信されるメールの手順に沿う。
基本的な流れは、
費用支払い→認証ファイルのアップロード→証明書のインストール
もしnginxの設定ファイルを書き換えた時に
nginx: [emerg] PEM_read_bio_X509_AUX(“証明書ファイル”) failed (SSL: error:0906D066:PEM routines:PEM_read_bio:bad end line)
のエラーが出た場合は、証明書のおいて、中間証明書と証明書の間に改行を加える。ただのcatでは引っ掛かる
参考　https://canalier.com/nginx-https-ssl%E8%A8%AD%E5%AE%9A/
〇セキュリティの強化
以下のページでドメインのセキュリティレベルを測定する。A+を目指す。
https://www.ssllabs.com/ssltest/
プロトコル対応の強化：TLSv1.3に対応させる
ssl_protocols TLSv1.3 TLSv1.2
ssl_prefer_server_ciphers on;
この2文を追加
参考　https://hackers-high.com/linux/nginx-tls13/
dhparamの設定
https://qiita.com/r-ytakada/items/7ac9ce32c1ed4d01d505
https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_dhparam
A+を目指す
追記した文
add_header Strict-Transport-Security 'max-age=31536000;' always;
ssl_ciphers 'HIGH !aNULL !eNULL !kECCH !DSS !MDS !EXP !PSK !SRP !CAMELLIA !SEED !RSA !SHA1 !SHA256 !SHA384';
ssl_ecdh_curve secp384r1;
参考　https://qiita.com/ooxif/items/431c5d6db68cc46db60d
